

// ------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "CodeFirst.ReverseEngineered.ReversePocoGenerator\App.config"
//     Connection String Name: "School"
//     Connection String:      "Data Source=.\SQLEXPRESS;Initial Catalog=School;Integrated Security=True;MultipleActiveResultSets=True"
// </auto-generated>
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace CodeFirst.ReverseEngineered.ReversePocoGenerator
{
    // ************************************************************************
    // Unit of work
    public interface ISchoolContext : IDisposable
    {
        DbSet<Course> Courses { get; set; } // Course
        DbSet<Department> Departments { get; set; } // Department
        DbSet<OfficeAssignment> OfficeAssignments { get; set; } // OfficeAssignment
        DbSet<OnlineCourse> OnlineCourses { get; set; } // OnlineCourse
        DbSet<OnsiteCourse> OnsiteCourses { get; set; } // OnsiteCourse
        DbSet<Person> People { get; set; } // Person
        DbSet<StudentGrade> StudentGrades { get; set; } // StudentGrade
        DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        
        // Stored Procedures
        int DeleteOfficeAssignment(int? instructorId);
        int DeletePerson(int? personId);
        int GetDepartmentName(int? id, out string name);
        List<GetStudentGradesReturnModel> GetStudentGrades(int? studentId, out int procResult);
        List<InsertOfficeAssignmentReturnModel> InsertOfficeAssignment(int? instructorId, string location, out int procResult);
        List<InsertPersonReturnModel> InsertPerson(string lastName, string firstName, DateTime? hireDate, DateTime? enrollmentDate, out int procResult);
        List<UpdateOfficeAssignmentReturnModel> UpdateOfficeAssignment(int? instructorId, string location, byte[] origTimestamp, out int procResult);
        int UpdatePerson(int? personId, string lastName, string firstName, DateTime? hireDate, DateTime? enrollmentDate);
    }

    // ************************************************************************
    // Database context
    public class SchoolContext : DbContext, ISchoolContext
    {
        public DbSet<Course> Courses { get; set; } // Course
        public DbSet<Department> Departments { get; set; } // Department
        public DbSet<OfficeAssignment> OfficeAssignments { get; set; } // OfficeAssignment
        public DbSet<OnlineCourse> OnlineCourses { get; set; } // OnlineCourse
        public DbSet<OnsiteCourse> OnsiteCourses { get; set; } // OnsiteCourse
        public DbSet<Person> People { get; set; } // Person
        public DbSet<StudentGrade> StudentGrades { get; set; } // StudentGrade
        public DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        
        static SchoolContext()
        {
            System.Data.Entity.Database.SetInitializer<SchoolContext>(null);
        }

        public SchoolContext()
            : base("Name=School")
        {
        }

        public SchoolContext(string connectionString) : base(connectionString)
        {
        }

        public SchoolContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CourseConfiguration());
            modelBuilder.Configurations.Add(new DepartmentConfiguration());
            modelBuilder.Configurations.Add(new OfficeAssignmentConfiguration());
            modelBuilder.Configurations.Add(new OnlineCourseConfiguration());
            modelBuilder.Configurations.Add(new OnsiteCourseConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new StudentGradeConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CourseConfiguration(schema));
            modelBuilder.Configurations.Add(new DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new OfficeAssignmentConfiguration(schema));
            modelBuilder.Configurations.Add(new OnlineCourseConfiguration(schema));
            modelBuilder.Configurations.Add(new OnsiteCourseConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentGradeConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
        public int DeleteOfficeAssignment(int? instructorId)
        {
            var instructorIdParam = new SqlParameter { ParameterName = "@InstructorID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = instructorId.GetValueOrDefault() };
            if (!instructorId.HasValue)
                instructorIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[DeleteOfficeAssignment] @InstructorID", instructorIdParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int DeletePerson(int? personId)
        {
            var personIdParam = new SqlParameter { ParameterName = "@PersonID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = personId.GetValueOrDefault() };
            if (!personId.HasValue)
                personIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[DeletePerson] @PersonID", personIdParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int GetDepartmentName(int? id, out string name)
        {
            var idParam = new SqlParameter { ParameterName = "@ID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = id.GetValueOrDefault() };
            if (!id.HasValue)
                idParam.Value = DBNull.Value;

            var nameParam = new SqlParameter { ParameterName = "@Name", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 50 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[GetDepartmentName] @ID, @Name OUTPUT", idParam, nameParam, procResultParam);
            if (((INullable)nameParam.SqlValue).IsNull)
                name = default(string);
            else
            name = (string) nameParam.Value;
 
            return (int) procResultParam.Value;
        }

        public List<GetStudentGradesReturnModel> GetStudentGrades(int? studentId)
        {
            int procResult;
            return GetStudentGrades(studentId, out procResult);
        }

        public List<GetStudentGradesReturnModel> GetStudentGrades(int? studentId, out int procResult)
        {
            var studentIdParam = new SqlParameter { ParameterName = "@StudentID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = studentId.GetValueOrDefault() };
            if (!studentId.HasValue)
                studentIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            var procResultData = Database.SqlQuery<GetStudentGradesReturnModel>("EXEC @procResult = [dbo].[GetStudentGrades] @StudentID", studentIdParam, procResultParam).ToList();
 
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public List<InsertOfficeAssignmentReturnModel> InsertOfficeAssignment(int? instructorId, string location)
        {
            int procResult;
            return InsertOfficeAssignment(instructorId, location, out procResult);
        }

        public List<InsertOfficeAssignmentReturnModel> InsertOfficeAssignment(int? instructorId, string location, out int procResult)
        {
            var instructorIdParam = new SqlParameter { ParameterName = "@InstructorID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = instructorId.GetValueOrDefault() };
            if (!instructorId.HasValue)
                instructorIdParam.Value = DBNull.Value;

            var locationParam = new SqlParameter { ParameterName = "@Location", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = location, Size = 50 };
            if (locationParam.Value == null)
                locationParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            var procResultData = Database.SqlQuery<InsertOfficeAssignmentReturnModel>("EXEC @procResult = [dbo].[InsertOfficeAssignment] @InstructorID, @Location", instructorIdParam, locationParam, procResultParam).ToList();
 
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public List<InsertPersonReturnModel> InsertPerson(string lastName, string firstName, DateTime? hireDate, DateTime? enrollmentDate)
        {
            int procResult;
            return InsertPerson(lastName, firstName, hireDate, enrollmentDate, out procResult);
        }

        public List<InsertPersonReturnModel> InsertPerson(string lastName, string firstName, DateTime? hireDate, DateTime? enrollmentDate, out int procResult)
        {
            var lastNameParam = new SqlParameter { ParameterName = "@LastName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = lastName, Size = 50 };
            if (lastNameParam.Value == null)
                lastNameParam.Value = DBNull.Value;

            var firstNameParam = new SqlParameter { ParameterName = "@FirstName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = firstName, Size = 50 };
            if (firstNameParam.Value == null)
                firstNameParam.Value = DBNull.Value;

            var hireDateParam = new SqlParameter { ParameterName = "@HireDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = DBNull.Value;

            var enrollmentDateParam = new SqlParameter { ParameterName = "@EnrollmentDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = enrollmentDate.GetValueOrDefault() };
            if (!enrollmentDate.HasValue)
                enrollmentDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            var procResultData = Database.SqlQuery<InsertPersonReturnModel>("EXEC @procResult = [dbo].[InsertPerson] @LastName, @FirstName, @HireDate, @EnrollmentDate", lastNameParam, firstNameParam, hireDateParam, enrollmentDateParam, procResultParam).ToList();
 
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public List<UpdateOfficeAssignmentReturnModel> UpdateOfficeAssignment(int? instructorId, string location, byte[] origTimestamp)
        {
            int procResult;
            return UpdateOfficeAssignment(instructorId, location, origTimestamp, out procResult);
        }

        public List<UpdateOfficeAssignmentReturnModel> UpdateOfficeAssignment(int? instructorId, string location, byte[] origTimestamp, out int procResult)
        {
            var instructorIdParam = new SqlParameter { ParameterName = "@InstructorID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = instructorId.GetValueOrDefault() };
            if (!instructorId.HasValue)
                instructorIdParam.Value = DBNull.Value;

            var locationParam = new SqlParameter { ParameterName = "@Location", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = location, Size = 50 };
            if (locationParam.Value == null)
                locationParam.Value = DBNull.Value;

            var origTimestampParam = new SqlParameter { ParameterName = "@OrigTimestamp", SqlDbType = SqlDbType.Timestamp, Direction = ParameterDirection.Input, Value = origTimestamp };
            if (origTimestampParam.Value == null)
                origTimestampParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            var procResultData = Database.SqlQuery<UpdateOfficeAssignmentReturnModel>("EXEC @procResult = [dbo].[UpdateOfficeAssignment] @InstructorID, @Location, @OrigTimestamp", instructorIdParam, locationParam, origTimestampParam, procResultParam).ToList();
 
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public int UpdatePerson(int? personId, string lastName, string firstName, DateTime? hireDate, DateTime? enrollmentDate)
        {
            var personIdParam = new SqlParameter { ParameterName = "@PersonID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = personId.GetValueOrDefault() };
            if (!personId.HasValue)
                personIdParam.Value = DBNull.Value;

            var lastNameParam = new SqlParameter { ParameterName = "@LastName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = lastName, Size = 50 };
            if (lastNameParam.Value == null)
                lastNameParam.Value = DBNull.Value;

            var firstNameParam = new SqlParameter { ParameterName = "@FirstName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = firstName, Size = 50 };
            if (firstNameParam.Value == null)
                firstNameParam.Value = DBNull.Value;

            var hireDateParam = new SqlParameter { ParameterName = "@HireDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = DBNull.Value;

            var enrollmentDateParam = new SqlParameter { ParameterName = "@EnrollmentDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = enrollmentDate.GetValueOrDefault() };
            if (!enrollmentDate.HasValue)
                enrollmentDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[UpdatePerson] @PersonID, @LastName, @FirstName, @HireDate, @EnrollmentDate", personIdParam, lastNameParam, firstNameParam, hireDateParam, enrollmentDateParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

    }

    // ************************************************************************
    // Fake Database context
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class FakeSchoolContext : ISchoolContext
    {
        public DbSet<Course> Courses { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<OfficeAssignment> OfficeAssignments { get; set; }
        public DbSet<OnlineCourse> OnlineCourses { get; set; }
        public DbSet<OnsiteCourse> OnsiteCourses { get; set; }
        public DbSet<Person> People { get; set; }
        public DbSet<StudentGrade> StudentGrades { get; set; }
        public DbSet<Sysdiagram> Sysdiagrams { get; set; }

        public FakeSchoolContext()
        {
            Courses = new FakeDbSet<Course>();
            Departments = new FakeDbSet<Department>();
            OfficeAssignments = new FakeDbSet<OfficeAssignment>();
            OnlineCourses = new FakeDbSet<OnlineCourse>();
            OnsiteCourses = new FakeDbSet<OnsiteCourse>();
            People = new FakeDbSet<Person>();
            StudentGrades = new FakeDbSet<StudentGrade>();
            Sysdiagrams = new FakeDbSet<Sysdiagram>();
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            throw new NotImplementedException();
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
        public int DeleteOfficeAssignment(int? instructorId)
        {
 
            return 0;
        }

        public int DeletePerson(int? personId)
        {
 
            return 0;
        }

        public int GetDepartmentName(int? id, out string name)
        {
            name = default(string);
 
            return 0;
        }

        public List<GetStudentGradesReturnModel> GetStudentGrades(int? studentId)
        {
            int procResult;
            return GetStudentGrades(studentId, out procResult);
        }

        public List<GetStudentGradesReturnModel> GetStudentGrades(int? studentId, out int procResult)
        {
 
            procResult = 0;
            return new List<GetStudentGradesReturnModel>();
        }

        public List<InsertOfficeAssignmentReturnModel> InsertOfficeAssignment(int? instructorId, string location)
        {
            int procResult;
            return InsertOfficeAssignment(instructorId, location, out procResult);
        }

        public List<InsertOfficeAssignmentReturnModel> InsertOfficeAssignment(int? instructorId, string location, out int procResult)
        {
 
            procResult = 0;
            return new List<InsertOfficeAssignmentReturnModel>();
        }

        public List<InsertPersonReturnModel> InsertPerson(string lastName, string firstName, DateTime? hireDate, DateTime? enrollmentDate)
        {
            int procResult;
            return InsertPerson(lastName, firstName, hireDate, enrollmentDate, out procResult);
        }

        public List<InsertPersonReturnModel> InsertPerson(string lastName, string firstName, DateTime? hireDate, DateTime? enrollmentDate, out int procResult)
        {
 
            procResult = 0;
            return new List<InsertPersonReturnModel>();
        }

        public List<UpdateOfficeAssignmentReturnModel> UpdateOfficeAssignment(int? instructorId, string location, byte[] origTimestamp)
        {
            int procResult;
            return UpdateOfficeAssignment(instructorId, location, origTimestamp, out procResult);
        }

        public List<UpdateOfficeAssignmentReturnModel> UpdateOfficeAssignment(int? instructorId, string location, byte[] origTimestamp, out int procResult)
        {
 
            procResult = 0;
            return new List<UpdateOfficeAssignmentReturnModel>();
        }

        public int UpdatePerson(int? personId, string lastName, string firstName, DateTime? hireDate, DateTime? enrollmentDate)
        {
 
            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> 
        where TEntity : class 
    { 
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        Type IQueryable.ElementType 
        { 
            get { return _query.ElementType; } 
        } 
 
        Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 
 
    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
 
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(Expression expression) 
            : base(expression) 
        { } 
 
        public IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T> 
    { 
        private readonly IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // Course
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class Course
    {
        public int CourseId { get; set; } // CourseID (Primary key)
        public string Title { get; set; } // Title
        public int Credits { get; set; } // Credits
        public int DepartmentId { get; set; } // DepartmentID

        // Reverse navigation
        public virtual ICollection<Person> People { get; set; } // Many to many mapping
        public virtual ICollection<StudentGrade> StudentGrades { get; set; } // StudentGrade.FK_StudentGrade_Course
        public virtual OnlineCourse OnlineCourse { get; set; } // OnlineCourse.FK_OnlineCourse_Course
        public virtual OnsiteCourse OnsiteCourse { get; set; } // OnsiteCourse.FK_OnsiteCourse_Course

        // Foreign keys
        public virtual Department Department { get; set; } // FK_Course_Department
        
        public Course()
        {
            StudentGrades = new List<StudentGrade>();
            People = new List<Person>();
        }
    }

    // Department
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class Department
    {
        public int DepartmentId { get; set; } // DepartmentID (Primary key)
        public string Name { get; set; } // Name
        public decimal Budget { get; set; } // Budget
        public DateTime StartDate { get; set; } // StartDate
        public int? Administrator { get; set; } // Administrator

        // Reverse navigation
        public virtual ICollection<Course> Courses { get; set; } // Course.FK_Course_Department
        
        public Department()
        {
            Courses = new List<Course>();
        }
    }

    // OfficeAssignment
    public class OfficeAssignment
    {
        public int InstructorId { get; set; } // InstructorID (Primary key)
        public string Location { get; set; } // Location
        public byte[] Timestamp { get; set; } // Timestamp

        // Foreign keys
        public virtual Person Person { get; set; } // FK_OfficeAssignment_Person
    }

    // OnlineCourse
    public class OnlineCourse
    {
        public int CourseId { get; set; } // CourseID (Primary key)
        public string Url { get; set; } // URL

        // Foreign keys
        public virtual Course Course { get; set; } // FK_OnlineCourse_Course
    }

    // OnsiteCourse
    public class OnsiteCourse
    {
        public int CourseId { get; set; } // CourseID (Primary key)
        public string Location { get; set; } // Location
        public string Days { get; set; } // Days
        public DateTime Time { get; set; } // Time

        // Foreign keys
        public virtual Course Course { get; set; } // FK_OnsiteCourse_Course
    }

    // Person
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class Person
    {
        public int PersonId { get; set; } // PersonID (Primary key)
        public string LastName { get; set; } // LastName
        public string FirstName { get; set; } // FirstName
        public DateTime? HireDate { get; set; } // HireDate
        public DateTime? EnrollmentDate { get; set; } // EnrollmentDate

        // Reverse navigation
        public virtual ICollection<Course> Courses { get; set; } // Many to many mapping
        public virtual ICollection<StudentGrade> StudentGrades { get; set; } // StudentGrade.FK_StudentGrade_Student
        public virtual OfficeAssignment OfficeAssignment { get; set; } // OfficeAssignment.FK_OfficeAssignment_Person
        
        public Person()
        {
            StudentGrades = new List<StudentGrade>();
            Courses = new List<Course>();
        }
    }

    // StudentGrade
    public class StudentGrade
    {
        public int EnrollmentId { get; set; } // EnrollmentID (Primary key)
        public int CourseId { get; set; } // CourseID
        public int StudentId { get; set; } // StudentID
        public decimal? Grade { get; set; } // Grade

        // Foreign keys
        public virtual Course Course { get; set; } // FK_StudentGrade_Course
        public virtual Person Person { get; set; } // FK_StudentGrade_Student
    }

    // sysdiagrams
    public class Sysdiagram
    {
        public string Name { get; set; } // name
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }


    // ************************************************************************
    // POCO Configuration

    // Course
    public class CourseConfiguration : EntityTypeConfiguration<Course>
    {
        public CourseConfiguration()
            : this("dbo")
        {
        }
 
        public CourseConfiguration(string schema)
        {
            ToTable(schema + ".Course");
            HasKey(x => x.CourseId);

            Property(x => x.CourseId).HasColumnName("CourseID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName("Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Credits).HasColumnName("Credits").IsRequired().HasColumnType("int");
            Property(x => x.DepartmentId).HasColumnName("DepartmentID").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Department).WithMany(b => b.Courses).HasForeignKey(c => c.DepartmentId); // FK_Course_Department
            HasMany(t => t.People).WithMany(t => t.Courses).Map(m => 
            {
                m.ToTable("CourseInstructor", "dbo");
                m.MapLeftKey("CourseID");
                m.MapRightKey("PersonID");
            });
        }
    }

    // Department
    public class DepartmentConfiguration : EntityTypeConfiguration<Department>
    {
        public DepartmentConfiguration()
            : this("dbo")
        {
        }
 
        public DepartmentConfiguration(string schema)
        {
            ToTable(schema + ".Department");
            HasKey(x => x.DepartmentId);

            Property(x => x.DepartmentId).HasColumnName("DepartmentID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Budget).HasColumnName("Budget").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.StartDate).HasColumnName("StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.Administrator).HasColumnName("Administrator").IsOptional().HasColumnType("int");
        }
    }

    // OfficeAssignment
    public class OfficeAssignmentConfiguration : EntityTypeConfiguration<OfficeAssignment>
    {
        public OfficeAssignmentConfiguration()
            : this("dbo")
        {
        }
 
        public OfficeAssignmentConfiguration(string schema)
        {
            ToTable(schema + ".OfficeAssignment");
            HasKey(x => x.InstructorId);

            Property(x => x.InstructorId).HasColumnName("InstructorID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Location).HasColumnName("Location").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Timestamp).HasColumnName("Timestamp").IsRequired().IsFixedLength().HasColumnType("timestamp").HasMaxLength(8).IsRowVersion().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);

            // Foreign keys
            HasRequired(a => a.Person).WithOptional(b => b.OfficeAssignment); // FK_OfficeAssignment_Person
        }
    }

    // OnlineCourse
    public class OnlineCourseConfiguration : EntityTypeConfiguration<OnlineCourse>
    {
        public OnlineCourseConfiguration()
            : this("dbo")
        {
        }
 
        public OnlineCourseConfiguration(string schema)
        {
            ToTable(schema + ".OnlineCourse");
            HasKey(x => x.CourseId);

            Property(x => x.CourseId).HasColumnName("CourseID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Url).HasColumnName("URL").IsRequired().HasColumnType("nvarchar").HasMaxLength(100);

            // Foreign keys
            HasRequired(a => a.Course).WithOptional(b => b.OnlineCourse); // FK_OnlineCourse_Course
        }
    }

    // OnsiteCourse
    public class OnsiteCourseConfiguration : EntityTypeConfiguration<OnsiteCourse>
    {
        public OnsiteCourseConfiguration()
            : this("dbo")
        {
        }
 
        public OnsiteCourseConfiguration(string schema)
        {
            ToTable(schema + ".OnsiteCourse");
            HasKey(x => x.CourseId);

            Property(x => x.CourseId).HasColumnName("CourseID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Location).HasColumnName("Location").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Days).HasColumnName("Days").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Time).HasColumnName("Time").IsRequired().HasColumnType("smalldatetime");

            // Foreign keys
            HasRequired(a => a.Course).WithOptional(b => b.OnsiteCourse); // FK_OnsiteCourse_Course
        }
    }

    // Person
    public class PersonConfiguration : EntityTypeConfiguration<Person>
    {
        public PersonConfiguration()
            : this("dbo")
        {
        }
 
        public PersonConfiguration(string schema)
        {
            ToTable(schema + ".Person");
            HasKey(x => x.PersonId);

            Property(x => x.PersonId).HasColumnName("PersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.HireDate).HasColumnName("HireDate").IsOptional().HasColumnType("datetime");
            Property(x => x.EnrollmentDate).HasColumnName("EnrollmentDate").IsOptional().HasColumnType("datetime");
        }
    }

    // StudentGrade
    public class StudentGradeConfiguration : EntityTypeConfiguration<StudentGrade>
    {
        public StudentGradeConfiguration()
            : this("dbo")
        {
        }
 
        public StudentGradeConfiguration(string schema)
        {
            ToTable(schema + ".StudentGrade");
            HasKey(x => x.EnrollmentId);

            Property(x => x.EnrollmentId).HasColumnName("EnrollmentID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CourseId).HasColumnName("CourseID").IsRequired().HasColumnType("int");
            Property(x => x.StudentId).HasColumnName("StudentID").IsRequired().HasColumnType("int");
            Property(x => x.Grade).HasColumnName("Grade").IsOptional().HasColumnType("decimal").HasPrecision(3,2);

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.StudentGrades).HasForeignKey(c => c.CourseId); // FK_StudentGrade_Course
            HasRequired(a => a.Person).WithMany(b => b.StudentGrades).HasForeignKey(c => c.StudentId); // FK_StudentGrade_Student
        }
    }

    // sysdiagrams
    public class SysdiagramConfiguration : EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }
 
        public SysdiagramConfiguration(string schema)
        {
            ToTable(schema + ".sysdiagrams");
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName("name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName("principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName("diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName("version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName("definition").IsOptional().HasColumnType("varbinary");
        }
    }


    // ************************************************************************
    // Stored procedure return models

    public class GetStudentGradesReturnModel
    {
        public Int32 EnrollmentID { get; set; }
        public Decimal? Grade { get; set; }
        public Int32 CourseID { get; set; }
        public Int32 StudentID { get; set; }
    }

    public class InsertOfficeAssignmentReturnModel
    {
        public Byte[] Timestamp { get; set; }
    }

    public class InsertPersonReturnModel
    {
        public Decimal? NewPersonID { get; set; }
    }

    public class UpdateOfficeAssignmentReturnModel
    {
        public Byte[] Timestamp { get; set; }
    }

}

